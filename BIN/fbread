#!/bin/sh

######################################################################
#
# FBREAD : Read Messages Onto A Facebook Wall
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2018-02-19
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [options]
	Options : -i <wall-id>|--id=<wall-id>  (always required)
	Version : 2018-02-19 06:28:36 JST
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Detect home directory of this app. and define more =============
Homedir="$(d=${0%/*}/; [ "_$d" = "_$0/" ] && d='./'; cd "$d.."; pwd)"
PATH="$Homedir/UTL:$Homedir/TOOL:$PATH" # for additional command
. "$Homedir/CONFIG/COMMON.SHLIB"        # account infomation
ACK=$(printf '\006')

# === Confirm that the required commands exist =======================
# --- cURL or Wget
if   type curl    >/dev/null 2>&1; then
  CMD_CURL='curl'
elif type wget    >/dev/null 2>&1; then
  CMD_WGET='wget'
else
  error_exit 1 'No HTTP-GET/POST command found.'
fi


######################################################################
# Argument Parsing
######################################################################

# === Print usage and exit if one of the help options is set =========
case "$# ${1:-}" in
  '1 -h'|'1 --help'|'1 --version') print_usage_and_exit;;
esac

# === Initialize parameters ==========================================
wallid='me'
rawoutputfile=''
timeout=''

# === Read options ===================================================
case $# in 0) print_usage_and_exit;; esac
while :; do
  case $# in 0) break;; esac
  case "${1:-}" in
    --id=*)      wallid=$(printf '%s' "${1#--id=}" | tr -d '\n' | grep ^)
                 shift
                 ;;
    -i)          wallid=$(printf '%s' "${2:-}"     | tr -d '\n' | grep ^)
                 shift 2
                 ;;
    --rawout=*)  # for debug
                 s=$(printf '%s' "${1#--rawout=}" | tr -d '\n')
                 rawoutputfile=$s
                 shift
                 ;;
    --timeout=*) # for debug
                 s=$(printf '%s' "${1#--timeout=}" | tr -d '\n')
                 printf '%s\n' "$s" | grep -q '^[0-9]\{1,\}$' || {
                   error_exit 1 'Invalid --timeout option'
                 }
                 timeout=$s
                 shift
                 ;;
    *)           error_exit 1 'Invalid option'
                 ;;
  esac
done
case "$wallid" in
  [0-9]*) printf '%s\n' "$wallid" | grep -Eq '^[0-9]+(_[0-9]+)?$' || {
            error_exit 1 'Invalid -i,--id option'
          }
          ;;
  *)      printf '%s\n' "$wallid" | grep -Eq '^[A-Za-z0-9._-]+$' || {
            error_exit 1 'Invalid -i,--id option'
          }
          ;;
esac


######################################################################
# Main Routine
######################################################################

# === Generate the URL for API endpoint ==============================
# --- 1) base URL
API_endpt="https://graph.facebook.com/${APIVER:+v${APIVER}/}${wallid}"
# --- 2) Add "feed" after the URL
API_endpt="${API_endpt}/feed"
# --- 3) Add the access token after it finally
API_endpt="${API_endpt}?access_token=$ACCTOKEN_USER"

# === Access to the endpoint =========================================
# --- 1) Access to it
res=$(if   [ -n "${CMD_WGET:-}" ]; then                #
        [ -n "$timeout" ] && {                         #
          timeout="--connect-timeout=$timeout"         #
        }                                              #
        "$CMD_WGET" ${no_cert_wget:-} -q -O -          \
                    $timeout                           \
                    "$API_endpt"                       #
      elif [ -n "${CMD_CURL:-}" ]; then                #
        [ -n "$timeout" ] && {                         #
          timeout="--connect-timeout $timeout"         #
        }                                              #
        "$CMD_CURL" ${no_cert_curl:-} -s               \
                    $timeout                           \
                    "$API_endpt"                       #
      fi                                               )
# --- 2) Exit immediately if it failed to access
case $? in [!0]*) error_exit 1 'Failed to access API';; esac

# === Parse the response =============================================
# --- 1.extract the required parameters from the response (written in JSON)
printf '%s' "$res"                                                           |
if [ -n "$rawoutputfile" ]; then tee "$rawoutputfile"; else cat; fi          |
parsrj.sh 2>/dev/null                                                        |
unescj.sh -n 2>/dev/null                                                     |
tr -d '\000'                                                                 |
sed -n '/^\$\.data\[/{s/^.\{7\}\([0-9]\{1,\}\)\]\./\1 /;p;}'                 |
awk '                                                                        #
  BEGIN             {n=-1;init_param();                            }         #
  $1!=n             {init_param();n=$1;                            }         #
  $2~/ated_time$/   {tm=$3;                        print_ms();next;}         #
  $2=="message"     {ms=substr($0,length($1 $2)+3);print_ms();next;}         #
  $2=="story"       {st=substr($0,length($1 $2)+3);print_ms();next;}         #
  $2=="id"          {id=$3                        ;print_ms();next;}         #
  function init_param() {                                                    #
    tm="";ms="";st="";id="";                                                 #
  }                                                                          #
  function print_ms( r,f) {                                                  #
    # 1)confirm the all required variables have been set                     #
    if (tm=="")   {return;}                                                  #
    if (ms st==""){return;}                                                  #
    if (id=="")   {return;}                                                  #
    # 2)reformat time field                                                  #
    sub(/Z/,"+0000",tm);                                                     #
    f=(index(tm,"+")>0)?1:-1;                                                #
    gsub(/[^0-9]/,"",tm);                                                    #
    t=substr(tm,1,14);zh=substr(tm,15,2);zm=substr(tm,17,2);                 #
    tm=sprintf("%s %d",t,(zh*60+zm*1)*f);                                    #
    # 3)escape spaces and tabs in message,story field                        #
    gsub(/ / ,"\006",ms); gsub(/\t/,"\025",ms);                              #
    gsub(/ / ,"\006",st); gsub(/\t/,"\025",st);                              #
    # 4)print                                                                #
    print id,ms "\034" st,tm;                                                #
    # 5)clear fields                                                         #
    init_param();                                                            #
  }                                                                          #
'                                                                            |
# 1:ID 2:msg/story(escaped) 3:localtime(away) 4:delta(local-UTC)             #
TZ=UTC+0 calclock 3                                                          |
# 1:ID 2:msg/story(escaped) 3:localtime(away) 4:UNIX-time 5:delta(local-UTC) #
awk '{print $1,$2,$4-$5;}'                                                   |
# 1:ID 2:msg/story(escaped) 3:UNIX-time(adjusted)                            #
calclock -r 3                                                                |
self 1 2 4                                                                   |
# 1:ID 2:msg/story(escaped) 3:localtime(home)                                #
awk '{                                                                       #
  id=$1;                                                                     #
  ms=substr($2,1                 ,index($2,"\034")-1);                       #
  st=substr($2,index($2,"\034")+1                   );                       #
  tm=$3;                                                                     #
  gsub(/[0-9][0-9]/,"& ",tm);                                                #
  split(tm,t);                                                               #
  tm=sprintf("%s%s/%s/%s-%s:%s:%s",t[1],t[2],t[3],t[4],t[5],t[6],t[7]);      #
  gsub(/\025/,"\t",ms); gsub(/\006/," " ,ms);                                #
  gsub(/\025/,"\t",st); gsub(/\006/," " ,st);                                #
  printf("%s postid:%s\n- msg:%s\n- sto:%s\n",tm,id,ms,st);                  #
}'                                                                           |
grep -Ev '^- [A-Za-z_0-9]+:$'                                                |
# --- 2.regard as an error if no line was outputed                           #
awk '{print;} END{exit 1-(NR>0);}'

# === Print error message if some error occured ======================
case $? in [!0]*)
  if printf '%s' "$res" | parsrj.sh | grep -Eq '^\$\.data\[0]$'; then
    echo '(No data or no permission to read)' 1>&2
  else
    err=$(echo "$res"                                                |
          parsrj.sh 2>/dev/null                                      |
          sed -n '/^\$\.error\./{s/^\$\.error\.//;p;}'               |
          awk 'BEGIN        {em="(none)"; ec=-1; et="(none)"; f=0; } #
               $1=="message"{em=substr($0,length($1)+2); f=1; next;} #
               $1=="type"   {et=substr($0,length($1)+2); f=1; next;} #
               $1=="code"   {ec=substr($0,length($1)+2); f=1; next;} #
               END          {if(f==0){exit 1;}                       #
                             printf("code:%d, type:%s/",ec,et);      #
                             print em;                             }')
    [ -z "$err" ] || {
      error_exit 1 "$(printf 'API error (%s)\n%s' "${err%%/*}" "${err#*/}")";
    }
    error_exit 1 "API returned an unknown message: $res"
  fi
;; esac


######################################################################
# Finish
######################################################################

exit 0
