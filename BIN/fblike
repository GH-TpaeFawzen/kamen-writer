#!/bin/sh

######################################################################
#
# FBLIKE : Mark "LIKE" On A Facebook Message or Page
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2018-02-02
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [options] <post-id>
	Version : 2018-02-02 16:53:26 JST
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Detect home directory of this app. and define more =============
Homedir="$(d=${0%/*}/; [ "_$d" = "_$0/" ] && d='./'; cd "$d.."; pwd)"
PATH="$Homedir/UTL:$PATH"               # for additional command
. "$Homedir/CONFIG/COMMON.SHLIB"        # account infomation

# === Confirm that the required commands exist =======================
# --- cURL or Wget
if   type curl    >/dev/null 2>&1; then
  CMD_CURL='curl'
elif type wget    >/dev/null 2>&1; then
  CMD_WGET='wget'
else
  error_exit 1 'No HTTP-GET/POST command found.'
fi


######################################################################
# Argument Parsing
######################################################################

# === Print usage and exit if one of the help options is set =========
case "$# ${1:-}" in
  '1 -h'|'1 --help'|'1 --version') print_usage_and_exit;;
esac

# === Initialize parameters ==========================================
postid=''
rawoutputfile=''
timeout=''

# === Read options ===================================================
while :; do
  case "${1:-}" in
    --rawout=*)  # for debug
                 s=$(printf '%s' "${1#--rawout=}" | tr -d '\n')
                 rawoutputfile=$s
                 shift
                 ;;
    --timeout=*) # for debug
                 s=$(printf '%s' "${1#--timeout=}" | tr -d '\n')
                 printf '%s\n' "$s" | grep -q '^[0-9]\{1,\}$' || {
                   error_exit 1 'Invalid --timeout option'
                 }
                 timeout=$s
                 shift
                 ;;
    --*|-*)      error_exit 1 'Invalid option'
                 ;;
    *)           break
                 ;;
  esac
done

# === Get post-id ====================================================
case $# in
  0) print_usage_and_exit
     ;;
  1) printf '%s\n' "$1" | grep -Eq '^[0-9]+(_[0-9]+)?$' || print_usage_and_exit
     postid=$1
     ;;
  *) print_usage_and_exit
     ;;
esac


######################################################################
# Main Routine
######################################################################

# === Generate the URL for API endpoint ==============================
# --- 1) base URL
API_endpt="https://graph.facebook.com/${APIVER:+v${APIVER}/}${postid}"
# --- 2) Add "likes" after the URL on "type"
API_endpt="${API_endpt}/likes"
# --- 3) Add the access token after it finally
API_endpt="${API_endpt}?access_token=$ACCTOKEN_USER"

# === Generate the parameter string ==================================
# --- 1) parameters except user large contents (message, image, video)
API_param=$(cat <<-PARAM               |
				method=post
				pretty=1
				suppress_http_code=1
				PARAM
            grep -Ev '^[A-Za-z0-9_]+=$')

# === Access to the endpoint =========================================
# --- 1) Access to it
res=$(s=$(echo "$API_param" |                          #
          urlencode -r      |                          #
          sed 's/%3[Dd]/=/' |                          #
          sort -k 1,1 -t '='|                          #
          tr '\n' '&'       |                          #
          grep ^            |                          #
          sed 's/&$//'      )                          ;
      if   [ -n "${CMD_WGET:-}" ]; then                #
        [ -n "$timeout" ] && {                         #
          timeout="--connect-timeout=$timeout"         #
        }                                              #
        "$CMD_WGET" ${no_cert_wget:-} -q -O -          \
                    --post-data="$s"                   \
                    $timeout                           \
                    "$API_endpt"                       #
      elif [ -n "${CMD_CURL:-}" ]; then                #
        [ -n "$timeout" ] && {                         #
          timeout="--connect-timeout $timeout"         #
        }                                              #
        "$CMD_CURL" ${no_cert_curl:-} -s               \
                    -d "$s"                            \
                    $timeout                           \
                    "$API_endpt"                       #
      fi                                               )
# --- 2) Exit immediately if it failed to access
case $? in [!0]*) error_exit 1 'Failed to access API';; esac

# === Parse the response =============================================
# --- 1.extract the required parameters from the response (written in JSON)
printf '%s' "$res"                                                    |
if [ -n "$rawoutputfile" ]; then tee "$rawoutputfile"; else cat; fi   |
parsrj.sh 2>/dev/null                                                 |
awk 'BEGIN             {sc=""                                      }  #
     $1~/^\$\.success$/{sc=$2; next;                               }  #
     END               {exit (sc=="true") ? 0 : 1;                 }'

# === Print error message if some error occured ======================
case $? in [!0]*)
  err=$(echo "$res"                                                |
        parsrj.sh 2>/dev/null                                      |
        sed -n '/^\$\.error\./{s/^\$\.error\.//;p;}'               |
        awk 'BEGIN        {em="(none)"; ec=-1; et="(none)"; f=0; } #
             $1=="message"{em=substr($0,length($1)+2); f=1; next;} #
             $1=="type"   {et=substr($0,length($1)+2); f=1; next;} #
             $1=="code"   {ec=substr($0,length($1)+2); f=1; next;} #
             END          {if(f==0){exit 1;}                       #
                           printf("code:%d, type:%s/",ec,et);      #
                           print em;                             }')
  [ -z "$err" ] || {
    error_exit 1 "$(printf 'API error (%s)\n%s' "${err%%/*}" "${err#*/}")";
  }
  error_exit 1 "API returned an unknown message: $res"
;; esac


######################################################################
# Finish
######################################################################

exit 0
