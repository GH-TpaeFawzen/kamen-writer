#!/bin/sh

######################################################################
#
# FBUPD : Update The Posted Message Onto A Facebook Wall
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2018-01-28
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [options] -i <post-id> <message>
	          echo <message> | ${0##*/} [options] -i <post-id> -
	Options : -p <mode>   |--privacy=<mode>
	             "ev" ................. EVERYONE (default)
	             "fr" ................. ALL_FRIENDS
	             "ff" ................. FRIENDS_OF_FRIENDS
	             "sl" ................. SELF
	             "al:<user-id>,..." ... CUSTOM(allow) for <user-id>,...
	             "de:<user-id>,..." ... CUSTOM(deny) for <user-id>,...
	          -t <user-id>,...|--tag=<user-id>,...
	Version : 2018-01-29 00:53:34 JST
	USAGE
  exit 1
}
exit_trap() {
  trap '-' EXIT HUP INT QUIT PIPE ALRM TERM
  [ -d "${Tmp:-}" ] && rm -rf "${Tmp%/*}/_${Tmp##*/_}"
  exit ${1:-0}
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Detect home directory of this app. and define more =============
Homedir="$(d=${0%/*}/; [ "_$d" = "_$0/" ] && d='./'; cd "$d.."; pwd)"
PATH="$Homedir/UTL:$PATH"               # for additional command
. "$Homedir/CONFIG/COMMON.SHLIB"        # account infomation

# === Confirm that the required commands exist =======================
# --- cURL or Wget
if   type curl    >/dev/null 2>&1; then
  CMD_CURL='curl'
elif type wget    >/dev/null 2>&1; then
  CMD_WGET='wget'
  trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
  Tmp=`mktemp -d -t "_${0##*/}.$$.XXXXXXXXXXX"`||error_exit 1 'Failed to mktemp'
else
  error_exit 1 'No HTTP-GET/POST command found.'
fi


######################################################################
# Argument Parsing
######################################################################

# === Print usage and exit if one of the help options is set =========
case "$# ${1:-}" in
  '1 -h'|'1 --help'|'1 --version') print_usage_and_exit;;
esac

# === Initialize parameters ==========================================
postid=''
message=''
privacy=''
tags=''
rawoutputfile=''
timeout=''

# === Read options ===================================================
while :; do
  case "${1:-}" in
    --id=*)      postid=$(printf '%s' "${1#--id=}" | tr -d '\n' | grep ^)
                 shift
                 ;;
    -i)          postid=$(printf '%s' "${2:-}"     | tr -d '\n' | grep ^)
                 shift 2
                 ;;
    --privacy=*) privacy=$(printf '%s' "${1#--privacy=}" | tr -d '\n' | grep ^)
                 shift
                 ;;
    -p)          privacy=$(printf '%s' "${2:-}"          | tr -d '\n' | grep ^)
                 shift 2
                 ;;
    --tag=*)     s=$(printf '%s' "${1#--tag=}" | tr -d '\n' | grep ^)
                 tags="$tags,$s"; tags=${tags#,}
                 shift
                 ;;
    -t)          s=$(printf '%s' "${2:-}"      | tr -d '\n' | grep ^)
                 tags="$tags,$s"; tags=${tags#,}
                 shift 2
                 ;;
    --rawout=*)  # for debug
                 s=$(printf '%s' "${1#--rawout=}" | tr -d '\n')
                 rawoutputfile=$s
                 shift
                 ;;
    --timeout=*) # for debug
                 s=$(printf '%s' "${1#--timeout=}" | tr -d '\n')
                 printf '%s\n' "$s" | grep -q '^[0-9]\{1,\}$' || {
                   error_exit 1 'Invalid --timeout option'
                 }
                 timeout=$s
                 shift
                 ;;
    --|-)        break
                 ;;
    --*|-*)      error_exit 1 'Invalid option'
                 ;;
    *)           break
                 ;;
  esac
done
printf '%s\n' "$postid" | grep -Eq '^[0-9]+(_[0-9]+)?$' || {
  error_exit 1 'Invalid -i,--id option'
}
printf '%s\n' "$privacy"                                 |
grep -Eiq '^(ev|fr|ff|sl|(al|de):[0-9]+(,[0-9]+)*)?$' || {
  error_exit 1 'Invalid -p,--privacy option'
}
printf '%s\n' "$tags" | grep -Eq '^([0-9]+(,[0-9]+)*)?$' || {
  error_exit 1 'Invalid -t,--tag option'
}

# === Get message ====================================================
# ("tr '\n' '\036'" is for escaping 0x0A to 0x1E temporarily)
case $# in
  0) unset message;;
  1) case "${1:-}" in
       '--') print_usage_and_exit                          ;;
        '-') message=$(cat -              | tr '\n' '\036');;
          *) message=$(printf '%s\n' "$1" | tr '\n' '\036');;
     esac
     ;;
  *) case "$1" in '--') shift;; esac
     message=$(printf '%s\n' "$*" | tr '\n' '\036')
     ;;
esac

# === Exit 0 if neither message nor privacy mode nor tags is given ===
${message+:} false || [ -n "$privacy$tags" ] || exit 0


######################################################################
# Main Routine
######################################################################

# === Generate the URL for API endpoint ==============================
# --- 1) base URL
API_endpt="https://graph.facebook.com/${APIVER:+v${APIVER}/}${postid}"
# --- 2) Add the access token after it finally
API_endpt="${API_endpt}?access_token=$ACCTOKEN_USER"

# === Generate the privacy field =====================================
case "$privacy" in
  [Ee][Vv])   privacy='{"value":"EVERYONE"}'                           ;;
  [Ff][Rr])   privacy='{"value":"ALL_FRIENDS"}'                        ;;
  [Ff][Ff])   privacy='{"value":"FRIENDS_OF_FRIENDS"}'                 ;;
  [Ss][Ll])   privacy='{"value":"SELF"}'                               ;;
  [Aa][Ll]:*) privacy='{"value":"CUSTOM","allow":"'"${privacy#*:*}"'"}';;
  [Dd][Ee]:*) privacy='{"value":"CUSTOM","deny":"'"${privacy#*:*}"'"}' ;;
  *)          privacy=''                                               ;;
esac

# === Generate the parameter string ==================================
# --- 1) parameters except user contents
API_param=$(cat <<-PARAM                      |
				method=post
				privacy=$privacy
				tags=$tags
				pretty=1
				suppress_http_code=1
				PARAM
            grep -Ev '^[A-Za-z0-9_]+=$'       )
# --- 2) message
# already given

# === Access to the endpoint =========================================
# --- 1) Access to it
res=$({ echo          "$API_param"       ;             #
        ${message+:} false              &&             #
        printf '%s\n' "message=$message" ; }           |
      urlencode -r                                     |
      sed 's/%1[Ee]/%0A/g'                             | #<Unescape
      sed 's/%3[Dd]/=/'                                | # 0x1E
      sort -k 1,1 -t '='                               | # to "%0A"
      tr '\n' '&'                                      |
      grep ^                                           |
      sed 's/&$//'                                     |
      if   [ -n "${CMD_WGET:-}" ]; then                #
        [ -n "$timeout" ] && {                         #
          timeout="--connect-timeout=$timeout"         #
        }                                              #
        cat > "$Tmp/formdata"                          #
        "$CMD_WGET" ${no_cert_wget:-} -q -O -          \
                    --post-file="$Tmp/formdata"        \
                    $timeout                           \
                    "$API_endpt"                       #
      elif [ -n "${CMD_CURL:-}" ]; then                #
        [ -n "$timeout" ] && {                         #
          timeout="--connect-timeout $timeout"         #
        }                                              #
        "$CMD_CURL" ${no_cert_curl:-} -s               \
                    $timeout                           \
                    --data-binary @-                   \
                    "$API_endpt"                       #
      fi                                               )
# --- 2) Exit immediately if it failed to access
case $? in [!0]*) error_exit 1 'Failed to access API';; esac

# === Parse the response =============================================
# --- 1.extract the required parameters from the response (written in JSON)
printf '%s' "$res"                                                    |
if [ -n "$rawoutputfile" ]; then tee "$rawoutputfile"; else cat; fi   |
parsrj.sh 2>/dev/null                                                 |
awk 'BEGIN             {sc=""                                      }  #
     $1~/^\$\.success$/{sc=$2; next;                               }  #
     END               {exit (sc=="true") ? 0 : 1;                 }'

# === Print error message if some error occured ======================
case $? in [!0]*)
  err=$(echo "$res"                                                |
        parsrj.sh 2>/dev/null                                      |
        sed -n '/^\$\.error\./{s/^\$\.error\.//;p;}'               |
        awk 'BEGIN        {em="(none)"; ec=-1; et="(none)"; f=0; } #
             $1=="message"{em=substr($0,length($1)+2); f=1; next;} #
             $1=="type"   {et=substr($0,length($1)+2); f=1; next;} #
             $1=="code"   {ec=substr($0,length($1)+2); f=1; next;} #
             END          {if(f==0){exit 1;}                       #
                           printf("code:%d, type:%s/",ec,et);      #
                           print em;                             }')
  [ -z "$err" ] || {
    error_exit 1 "$(printf 'API error (%s)\n%s' "${err%%/*}" "${err#*/}")";
  }
  error_exit 1 "API returned an unknown message: $res"
;; esac


######################################################################
# Finish
######################################################################

exit 0
