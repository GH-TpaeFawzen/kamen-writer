#!/bin/sh

######################################################################
#
# FBPOST : Post A Message Onto A Facebook Wall
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2018-01-27
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [options] <message>
	          echo <message> | ${0##*/} [options] -
	Options : -i <wall-id>   |--id=<wall-id>
	          -f <media_file>|--file=<media_file>
	          -u <url>       |--link=<url>
	          -l <place-id>  |--place=<place-id>
	          -o <object-id> |--object=<object-id>
	          -p <mode>      |--privacy=<mode>
	             "ev" ................. EVERYONE (default)
	             "fr" ................. ALL_FRIENDS
	             "ff" ................. FRIENDS_OF_FRIENDS
	             "sl" ................. SELF
	             "al:<user-id>,..." ... CUSTOM(allow) for <user-id>,...
	             "de:<user-id>,..." ... CUSTOM(deny) for <user-id>,...
	          -t <user-id>,...|--tag=<user-id>,...
	Version : 2018-01-27 19:58:47 JST
	USAGE
  exit 1
}
exit_trap() {
  trap '-' EXIT HUP INT QUIT PIPE ALRM TERM
  [ -d "${Tmp:-}" ] && rm -rf "${Tmp%/*}/_${Tmp##*/_}"
  exit ${1:-0}
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Detect home directory of this app. and define more =============
Homedir="$(d=${0%/*}/; [ "_$d" = "_$0/" ] && d='./'; cd "$d.."; pwd)"
PATH="$Homedir/UTL:$PATH"               # for additional command
. "$Homedir/CONFIG/COMMON.SHLIB"        # account infomation

# === Confirm that the required commands exist =======================
# --- cURL or Wget
if   type curl    >/dev/null 2>&1; then
  CMD_CURL='curl'
elif type wget    >/dev/null 2>&1; then
  CMD_WGET='wget'
  trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
  Tmp=`mktemp -d -t "_${0##*/}.$$.XXXXXXXXXXX"`||error_exit 1 'Failed to mktemp'
else
  error_exit 1 'No HTTP-GET/POST command found.'
fi


######################################################################
# Argument Parsing
######################################################################

# === Print usage and exit if one of the help options is set =========
case "$# ${1:-}" in
  '1 -h'|'1 --help'|'1 --version') print_usage_and_exit;;
esac

# === Initialize parameters ==========================================
wallid='me'
message=''
mediafile=''
link=''
objectid=''
place=''
privacy='ev'
tags=''
rawoutputfile=''
timeout=''

# === Read options ===================================================
while :; do
  case "${1:-}" in
    --file=*)    [ -z "$mediafile" ] || error_exit 1 '-f,--file is only once'
                 s=$(printf '%s' "${1#--file=}")
                 [ -n "$s" ] || error_exit 1 'Invalid --file option'
                 [ -f "$s" ] || error_exit 1 "File not found: \"$s\""
                 mediafile="$mediafile/$s"; mediafile=${mediafile#/}
                 shift
                 ;;
    -f)          [ -z "$mediafile" ] || error_exit 1 '-f,--file is only once'
                 s=$(printf '%s' "${2:-}")
                 [ -n "$s" ] || error_exit 1 'Invalid -f option'
                 [ -f "$s" ] || error_exit 1 "File not found: \"$s\""
                 mediafile="$mediafile/$s"; mediafile=${mediafile#/}
                 shift 2
                 ;;
    --id=*)      wallid=$(printf '%s' "${1#--id=}" | tr -d '\n' | grep ^)
                 shift
                 ;;
    -i)          wallid=$(printf '%s' "${2:-}"     | tr -d '\n' | grep ^)
                 shift 2
                 ;;
    --link=*)    link=$(printf '%s' "${1#--link=}" | tr -d '\n' | grep ^)
                 shift
                 ;;
    -u)          link=$(printf '%s' "${2:-}"       | tr -d '\n' | grep ^)
                 shift 2
                 ;;
    --place=*)   place=$(printf '%s' "${1#--place=}" | tr -d '\n' | grep ^)
                 shift
                 ;;
    -l)          place=$(printf '%s' "${2:-}"        | tr -d '\n' | grep ^)
                 shift 2
                 ;;
    --object=*)  objectid=$(printf '%s' "${1#--object=}" | tr -d '\n' | grep ^)
                 shift
                 ;;
    -o)          objectid=$(printf '%s' "${2:-}"         | tr -d '\n' | grep ^)
                 shift 2
                 ;;
    --privacy=*) privacy=$(printf '%s' "${1#--privacy=}" | tr -d '\n' | grep ^)
                 shift
                 ;;
    -p)          privacy=$(printf '%s' "${2:-}"          | tr -d '\n' | grep ^)
                 shift 2
                 ;;
    --tag=*)     s=$(printf '%s' "${1#--tag=}" | tr -d '\n' | grep ^)
                 tags="$tags,$s"; tags=${tags#,}
                 shift
                 ;;
    -t)          s=$(printf '%s' "${2:-}"      | tr -d '\n' | grep ^)
                 tags="$tags,$s"; tags=${tags#,}
                 shift 2
                 ;;
    --rawout=*)  # for debug
                 s=$(printf '%s' "${1#--rawout=}" | tr -d '\n')
                 rawoutputfile=$s
                 shift
                 ;;
    --timeout=*) # for debug
                 s=$(printf '%s' "${1#--timeout=}" | tr -d '\n')
                 printf '%s\n' "$s" | grep -q '^[0-9]\{1,\}$' || {
                   error_exit 1 'Invalid --timeout option'
                 }
                 timeout=$s
                 shift
                 ;;
    --|-)        break
                 ;;
    --*|-*)      error_exit 1 'Invalid option'
                 ;;
    *)           break
                 ;;
  esac
done
printf '%s\n' "$wallid" | grep -Eq '^me$|^[0-9]+(_[0-9]+)?$' || {
  error_exit 1 'Invalid -i,--id option'
}
printf '%s\n' "$link"                                                   |
grep -Eiq '^(https?://[A-Za-z0-9][A-Za-z0-9.-]+[A-Za-z0-9](/.*)?)?$' || {
  error_exit 1 'Invalid -u,--url option'
}
printf '%s\n' "$objectid"| grep -Eq '^([0-9]+(_[0-9]+)?)?$' || {
  error_exit 1 'Invalid -o,--object option'
}
printf '%s\n' "$place"| grep -Eq '^([0-9]+(_[0-9]+)?)?$' || {
  error_exit 1 'Invalid -l,--place option'
}
printf '%s\n' "$privacy"                                |
grep -Eiq '^(ev|fr|ff|sl|(al|de):[0-9]+(,[0-9]+)*)$' || {
  error_exit 1 'Invalid -p,--privacy option'
}
printf '%s\n' "$tags" | grep -Eq '^([0-9]+(,[0-9]+)*)?$' || {
  error_exit 1 'Invalid -t,--tag option'
}

# === Get message ====================================================
# ("tr '\n' '\036'" is for escaping 0x0A to 0x1E temporarily)
case $# in
  0) unset message;;
  1) case "${1:-}" in
       '--') print_usage_and_exit                          ;;
        '-') message=$(cat -              | tr '\n' '\036');;
          *) message=$(printf '%s\n' "$1" | tr '\n' '\036');;
     esac
     ;;
  *) case "$1" in '--') shift;; esac
     message=$(printf '%s\n' "$*" | tr '\n' '\036')
     ;;
esac

# === Exit 1 if neither message nor link nor place is given ==========
${message+:} false || [ -n "$link$place$mediafile" ] || print_usage_and_exit


######################################################################
# Main Routine
######################################################################

# === Decide whether the message have any image file or video file, or no file
type='' # 0:no-file 1:image-file 2:video-file
videoexts="3g2 3gp 3gpp asf avi dat divx dv f4v flv m2ts m4v mkv mod mov mp4"
videoexts="$videoexts mpe mpeg mpeg4 mpg mts nsv ogm ogv qt tod ts vob wmv"
export ext
while :; do
  [ -z "$mediafile" ] && { type=0; break; }
  #
  export ext=${mediafile#*.}
  [ "$ext" = "$mediafile" ] && { type=1; break; }
  #
  type=$(echo $videoexts                                |
         awk '{for(i=1;i<=NF;i++){vext[$i]=1;}          #
               print (ENVIRON["ext"] in vext) ? 2 : 1;}')
break;done
unset videoexts
unset ext

# === Generate the URL for API endpoint ==============================
# --- 1) base URL
API_endpt="https://graph.facebook.com/${APIVER:+v${APIVER}/}${wallid}"
# --- 2) Add "feed", "photos" or "video" after the URL on "type"
case $type in
  0) API_endpt="${API_endpt}/feed"  ;;
  1) API_endpt="${API_endpt}/photos";;
  2) API_endpt="${API_endpt}/videos";;
esac
# --- 3) Add the access token after it finally
API_endpt="${API_endpt}?access_token=$ACCTOKEN_USER"

# === Generate the privacy field =====================================
case "$privacy" in
  [Ee][Vv])   privacy='{"value":"EVERYONE"}'                           ;;
  [Ff][Rr])   privacy='{"value":"ALL_FRIENDS"}'                        ;;
  [Ff][Ff])   privacy='{"value":"FRIENDS_OF_FRIENDS"}'                 ;;
  [Ss][Ll])   privacy='{"value":"SELF"}'                               ;;
  [Aa][Ll]:*) privacy='{"value":"CUSTOM","allow":"'"${privacy#*:*}"'"}';;
  [Dd][Ee]:*) privacy='{"value":"CUSTOM","deny":"'"${privacy#*:*}"'"}' ;;
  *)          privacy=''                                               ;;
esac

# === Generate the parameter string ==================================
# --- 1) parameters except user large contents (message, image, video)
API_param=$(cat <<-PARAM                      |
				method=post
				link=$link
				object_attachment=$objectid
				place=$place
				privacy=$privacy
				tags=$tags
				pretty=1
				suppress_http_code=1
				PARAM
            grep -Ev '^[A-Za-z0-9_]+=$'       )
# --- 2) message
# already given
# --- 3) mediafile
# already given

# === [Only for type 0] Access to the endpoint =======================
# --- 0) start of the routine
case $type in 0)
# --- 1) Access to it
res=$({ echo          "$API_param"       ;             #
        ${message+:} false              &&             #
        printf '%s\n' "message=$message" ; }           |
      urlencode -r                                     |
      sed 's/%1[Ee]/%0A/g'                             | #<Unescape
      sed 's/%3[Dd]/=/'                                | # 0x1E
      sort -k 1,1 -t '='                               | # to "%0A"
      tr '\n' '&'                                      |
      grep ^                                           |
      sed 's/&$//'                                     |
      if   [ -n "${CMD_WGET:-}" ]; then                #
        [ -n "$timeout" ] && {                         #
          timeout="--connect-timeout=$timeout"         #
        }                                              #
        cat > "$Tmp/formdata"                          #
        "$CMD_WGET" ${no_cert_wget:-} -q -O -          \
                    --post-file="$Tmp/formdata"        \
                    $timeout                           \
                    "$API_endpt"                       #
      elif [ -n "${CMD_CURL:-}" ]; then                #
        [ -n "$timeout" ] && {                         #
          timeout="--connect-timeout $timeout"         #
        }                                              #
        "$CMD_CURL" ${no_cert_curl:-} -s               \
                    $timeout                           \
                    --data-binary @-                   \
                    "$API_endpt"                       #
      fi                                               )
# --- 2) Exit immediately if it failed to access
case $? in [!0]*) error_exit 1 'Failed to access API';; esac
# --- 3) end of the routine
;; esac


# === [Only for type 1,2] Access to the endpoint =====================
# --- 0) start of the routine
case $type in [12])
# --- 1) Make data for HTTP POST
s=$(mime-make -m)
ct_hdr="Content-Type: multipart/form-data; boundary=\"$s\""
mmargs=$(printf '%s ' "-b $s";
         echo "$API_param"   |
         sed 's/=/ /'        |
         sed 's/^/-T /'      |
         tr '\n' ' '         )
res=$(if ${message+:} false; then                                #
        printf '%s\n' "$message"                               | #
        tr '\036' '\n'                                         | #
        mime-make $mmargs -F source "$mediafile" -Tf caption -   #
      else                                                       #
        mime-make $mmargs -F source "$mediafile"                 #
      fi                                                         |
      if   [ -n "${CMD_WGET:-}" ]; then                          #
        [ -n "$timeout" ] && {                                   #
          timeout="--connect-timeout=$timeout"                   #
        }                                                        #
        cat > "$Tmp/mimedata"                                    #
        "$CMD_WGET" ${no_cert_wget:-} -q -O -                    \
                    --header="$ct_hdr"                           \
                    --post-file="$Tmp/mimedata"                  \
                    $timeout                                     \
                    "$API_endpt"                                 #
      elif [ -n "${CMD_CURL:-}" ]; then                          #
        [ -n "$timeout" ] && {                                   #
          timeout="--connect-timeout $timeout"                   #
        }                                                        #
        "$CMD_CURL" ${no_cert_curl:-} -s                         \
                    $timeout                                     \
                    -H "$ct_hdr"                                 \
                    --data-binary @-                             \
                    "$API_endpt"                                 #
      fi                                                         )
# --- 2) Exit immediately if it failed to access
case $? in [!0]*) error_exit 1 'Failed to access API';; esac
# --- 3) end of the routine ------------------------------------------
;; esac

# === Parse the response =============================================
# --- 1.extract the required parameters from the response (written in JSON)
printf '%s' "$res"                                                    |
if [ -n "$rawoutputfile" ]; then tee "$rawoutputfile"; else cat; fi   |
parsrj.sh 2>/dev/null                                                 |
awk 'BEGIN             {id=""; pi="";                              }  #
     $1~/^\$\.id$/     {id=$2; next;                               }  #
     $1~/^\$\.post_id$/{pi=$2; next;                               }  #
     END               {if (id!="") {OFS=""; print "id="    ,id;}     #
                        if (pi!="") {OFS=""; print "postid=",pi;}  }' |
# --- 2.regard as an error if no line was outputed                    #
awk '{print;} END{exit 1-(NR>0);}'

# === Print error message if some error occured ======================
case $? in [!0]*)
  err=$(echo "$res"                                                |
        parsrj.sh 2>/dev/null                                      |
        sed -n '/^\$\.error\./{s/^\$\.error\.//;p;}'               |
        awk 'BEGIN        {em="(none)"; ec=-1; et="(none)"; f=0; } #
             $1=="message"{em=substr($0,length($1)+2); f=1; next;} #
             $1=="type"   {et=substr($0,length($1)+2); f=1; next;} #
             $1=="code"   {ec=substr($0,length($1)+2); f=1; next;} #
             END          {if(f==0){exit 1;}                       #
                           printf("code:%d, type:%s/",ec,et);      #
                           print em;                             }')
  [ -z "$err" ] || {
    error_exit 1 "$(printf 'API error (%s)\n%s' "${err%%/*}" "${err#*/}")";
  }
  error_exit 1 "API returned an unknown message: $res"
;; esac


######################################################################
# Finish
######################################################################

exit 0
